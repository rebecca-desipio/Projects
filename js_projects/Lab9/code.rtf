{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fmodern JetBrains Mono;}}
{\colortbl ;\red255\green198\blue109;\red169\green183\blue198;\red204\green120\blue50;\red152\green118\blue170;\red128\green128\blue128;\red104\green151\blue187;\red106\green135\blue89;}
{\*\generator Riched20 10.0.22000}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9\par
\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf1\f1\fs20 wrangleData\cf2 () \{\line     \cf3 let \cf2 vis = \cf3 this;\line\line     \cf2 vis.\cf4 displayData \cf2 = vis.\cf4 data\cf3 ;\line\line     \cf5 // Loop through all families and add the index, marriages array (& count), business array (& count)\line     \cf2 vis.\cf4 displayData\cf2 .\cf1 forEach\cf2 (\cf1 addElements\cf2 )\cf3 ;\line\line     function \cf1 addElements\cf2 (item\cf3 , \cf2 index\cf3 , \cf2 arr)\{\line         \cf5 //console.log(item)\line         \cf3 let \cf2 numMarriages  = vis.\cf4 marriageData\cf2 .\cf1 filter\cf2 (row => row[index]==\cf6 1\cf2 ).\cf4 length\cf3 ;\line         let \cf2 numBusinesses = vis.\cf4 businessData\cf2 .\cf1 filter\cf2 (row => row[index]==\cf6 1\cf2 ).\cf4 length\cf3 ;\line\line         \cf2 item[\cf7 'index'\cf2 ]          = index\line         item[\cf7 'marriageValues'\cf2 ] = vis.\cf4 marriageData\cf2 [index]\line         item[\cf7 'marriages'\cf2 ]      = numMarriages\line         item[\cf7 'businessValues'\cf2 ] = vis.\cf4 businessData\cf2 [index]\line         item[\cf7 'businessTies'\cf2 ]   = numBusinesses\line         item[\cf7 'allRelations'\cf2 ]   = numMarriages + numBusinesses\line\line     \}\line     \cf4\b\i console\cf2\b0\i0 .\cf1 log\cf2 (vis.\cf4 displayData\cf2 )\line\line     \cf5 // update visualization based on selected dropdown\line     \cf2 d3.\cf1 select\cf2 (\cf7 "#sort-by"\cf2 ).on(\cf7 "change"\cf3 , function\cf2 () \{\line\line         \cf3 if \cf2 (d3.\cf1 select\cf2 (\cf7 "#sort-by"\cf2 ).property(\cf7 "value"\cf2 ) === \cf7 "business"\cf2 ) \{\line             vis.\cf4 selectedOption \cf2 = \cf7 "businessTies"\line         \cf2\} \cf3 else if \cf2 (d3.\cf1 select\cf2 (\cf7 "#sort-by"\cf2 ).property(\cf7 "value"\cf2 ) === \cf7 "marriages"\cf2 )\{\line             vis.\cf4 selectedOption \cf2 = \cf7 "marriages"\line         \cf2\} \cf3 else if \cf2 (d3.\cf1 select\cf2 (\cf7 "#sort-by"\cf2 ).property(\cf7 "value"\cf2 ) === \cf7 "relationships"\cf2 )\{\line             vis.\cf4 selectedOption \cf2 = \cf7 "allRelations"\line         \cf2\} \cf3 else if \cf2 (d3.\cf1 select\cf2 (\cf7 "#sort-by"\cf2 ).property(\cf7 "value"\cf2 ) === \cf7 "wealth"\cf2 )\{\line             vis.\cf4 selectedOption \cf2 = \cf7 "Wealth"\line         \cf2\} \cf3 else if \cf2 (d3.\cf1 select\cf2 (\cf7 "#sort-by"\cf2 ).property(\cf7 "value"\cf2 ) === \cf7 "priorates"\cf2 )\{\line             vis.\cf4 selectedOption \cf2 = \cf7 "Priorates"\line         \cf2\} \cf3 else \cf2\{\line             vis.\cf4 selectedOption \cf2 = \cf7 "index"\line         \cf2\}\line\line         \cf4\b\i console\cf2\b0\i0 .\cf1 log\cf2 (vis.\cf4 selectedOption\cf2 )\line\line         vis.\cf1 updateVis\cf2 ()\line\line     \})\line\line\line     \cf5 // Update the visualization\line     \cf2 vis.\cf1 updateVis\cf2 ()\cf3 ;\line\cf2\}\line\line\line\line\cf5 /*\line  * The drawing function\line  */\line\line\cf1 updateVis\cf2 () \{\line     \cf3 let \cf2 vis = \cf3 this;\line\line     if \cf2 (vis.\cf4 selectedOption \cf2 === \cf7 "businessTies"\cf2 ) \{\line         vis.\cf4 displayData\cf2 .\cf1 sort\cf2 ((a\cf3 , \cf2 b) => b[vis.\cf4 selectedOption\cf2 ] - a[vis.\cf4 selectedOption\cf2 ])\cf3 ;\line     \cf2\}\cf3 else if \cf2 (vis.\cf4 selectedOption \cf2 === \cf7 "marriages"\cf2 ) \{\line         vis.\cf4 displayData\cf2 .\cf1 sort\cf2 ((a\cf3 , \cf2 b) => b[vis.\cf4 selectedOption\cf2 ] - a[vis.\cf4 selectedOption\cf2 ])\cf3 ;\line     \cf2\}\cf3 else if \cf2 (vis.\cf4 selectedOption \cf2 === \cf7 "allRelations"\cf2 ) \{\line         vis.\cf4 displayData\cf2 .\cf1 sort\cf2 ((a\cf3 , \cf2 b) => b[vis.\cf4 selectedOption\cf2 ] - a[vis.\cf4 selectedOption\cf2 ])\cf3 ;\line     \cf2\}\cf3 else if \cf2 (vis.\cf4 selectedOption \cf2 === \cf7 "Wealth"\cf2 ) \{\line         vis.\cf4 displayData\cf2 .\cf1 sort\cf2 ((a\cf3 , \cf2 b) => b[vis.\cf4 selectedOption\cf2 ] - a[vis.\cf4 selectedOption\cf2 ])\cf3 ;\line     \cf2\}\cf3 else if \cf2 (vis.\cf4 selectedOption \cf2 === \cf7 "Priorates"\cf2 ) \{\line         vis.\cf4 displayData\cf2 .\cf1 sort\cf2 ((a\cf3 , \cf2 b) => b[vis.\cf4 selectedOption\cf2 ] - a[vis.\cf4 selectedOption\cf2 ])\cf3 ;\line     \cf2\}\cf3 else\cf2\{\line         vis.\cf4 displayData\cf2 .\cf1 sort\cf2 ((a\cf3 , \cf2 b) => a[vis.\cf4 selectedOption\cf2 ] - b[vis.\cf4 selectedOption\cf2 ])\cf3 ;\line     \cf2\}\line\line     \cf4\b\i console\cf2\b0\i0 .\cf1 log\cf2 (\cf7 "sorted disp data: "\cf3 , \cf2 vis.\cf4 displayData\cf2 )\line\line     vis.\cf4 cellHeight \cf2 = \cf6 20\cf3 ;\line     \cf2 vis.\cf4 cellWidth \cf2 = \cf6 20\cf3 ;\line     \cf2 vis.\cf4 cellPadding \cf2 = \cf6 10\cf3 ;\line\line     \cf2 vis.\cf4 row \cf2 = vis.\cf4 svg\cf2 .selectAll(\cf7 ".matrix-row"\cf2 )\line         .\cf1 data\cf2 (vis.\cf4 displayData\cf3 , function\cf2 (d)\{\line             \cf3 return \cf2 d.\cf4 name\line         \cf2\})\line         .\cf4 enter\cf2 ()\line         .\cf1 append\cf2 (\cf7 "g"\cf2 )\line         .attr(\cf7 "class"\cf3 , \cf7 "matrix-row"\cf2 )\line         .attr(\cf7 "transform"\cf3 , function \cf2 (d\cf3 , \cf2 index) \{\line             \cf3 return \cf7 "translate(0," \cf2 + (vis.\cf4 cellHeight \cf2 + vis.\cf4 cellPadding\cf2 ) * index + \cf7 ")"\cf3 ;\line         \cf2\})\line\line     vis.\cf4 cellMatrix \cf2 = vis.\cf4 row\cf2 .selectAll(\cf7 ".matrix-cells"\cf2 )\line         \cf5 //.data(function (d, i) \{\line         //    return d;\line         //\})\line         \cf2 .\cf1 data\cf2 (vis.\cf4 displayData\cf2 )\line         .\cf4 enter\cf2 ().\cf1 append\cf2 (\cf7 "rect"\cf2 )\line         .attr(\cf7 "class"\cf3 , \cf7 "matrix-cell"\cf2 )\line         .attr(\cf7 "height"\cf3 , \cf2 vis.\cf4 cellHeight\cf2 )\line         .attr(\cf7 "width"\cf3 , \cf2 vis.\cf4 cellWidth\cf2 )\line         .attr(\cf7 "x"\cf3 , function \cf2 (d\cf3 , \cf2 index) \{\line             \cf3 return \cf2 (vis.\cf4 cellWidth \cf2 + vis.\cf4 cellPadding\cf2 ) * index\line         \})\line         .attr(\cf7 "fill"\cf3 , \cf7 "#ddd"\cf2 )\line         .attr(\cf7 "transform"\cf3 , \cf7 "translate(" \cf2 + vis.\cf4 margin\cf2 .\cf4 left\cf2 *\cf6 3 \cf2 + \cf7 "," \cf2 + vis.\cf4 margin\cf2 .\cf4 top\cf2 *\cf6 4.25 \cf2 + \cf7 ")"\cf2 )\cf3 ;\line\line     \cf5 // draw marriage triangles\line     \cf2 vis.\cf4 cellMarriage \cf2 = vis.\cf4 row\cf2 .selectAll(\cf7 ".matrix-cell-marriage"\cf2 )\line         .\cf1 data\cf2 (\cf3 function\cf2 (d)\{\line             \cf3 return \cf2 d.\cf4 marriageValues\line         \cf2\})\line         .\cf4 enter\cf2 ().\cf1 append\cf2 (\cf7 "path"\cf2 )\line         .attr(\cf7 "class"\cf3 , \cf7 "matrix-cell matrix-cell-marriage"\cf2 )\line         .attr(\cf7 "height"\cf3 , \cf2 vis.\cf4 cellHeight\cf2 )\line         .attr(\cf7 "width"\cf3 , \cf2 vis.\cf4 cellWidth\cf2 )\line         .attr(\cf7 "fill"\cf3 , \cf7 "#8686bf"\cf2 )\line         .attr(\cf7 "d"\cf3 , function \cf2 (d\cf3 , \cf2 index) \{\line             \cf4\b\i console\cf2\b0\i0 .\cf1 log\cf2 (d)\line             \cf4\b\i console\cf2\b0\i0 .\cf1 log\cf2 (\cf7 "index"\cf3 , \cf2 index)\line             \cf3 if \cf2 (d === \cf6 1\cf2 )\{\line                 \cf3 let \cf2 x = (vis.\cf4 cellWidth \cf2 + vis.\cf4 cellPadding\cf2 )* index\cf3 ;\line                 let \cf2 y = \cf6 0\cf3 ;\line                 return \cf2 (\cf7 'M ' \cf2 + x + \cf7 ' ' \cf2 + y + \cf7 ' l ' \cf2 + vis.\cf4 cellWidth \cf2 + \cf7 ' 0 l 0 ' \cf2 + vis.\cf4 cellHeight \cf2 + \cf7 ' z'\cf2 )\line             \}\line\line\line         \})\line         .attr(\cf7 "transform"\cf3 , \cf7 "translate(" \cf2 + vis.\cf4 margin\cf2 .\cf4 left\cf2 *\cf6 3 \cf2 + \cf7 "," \cf2 + vis.\cf4 margin\cf2 .\cf4 top\cf2 *\cf6 4.25 \cf2 + \cf7 ")"\cf2 )\cf3 ;\line\line     \cf5 // draw business triangles\line     \cf2 vis.\cf4 cellBusiness \cf2 = vis.\cf4 row\cf2 .selectAll(\cf7 ".matrix-cell-business"\cf2 )\line         .\cf1 data\cf2 (\cf3 function\cf2 (d)\{\line             \cf3 return \cf2 d.\cf4 businessValues\line         \cf2\})\line         .\cf4 enter\cf2 ().\cf1 append\cf2 (\cf7 "path"\cf2 )\line         .attr(\cf7 "class"\cf3 , \cf7 "matrix-cell matrix-cell-business"\cf2 )\line         .attr(\cf7 "height"\cf3 , \cf2 vis.\cf4 cellHeight\cf2 )\line         .attr(\cf7 "width"\cf3 , \cf2 vis.\cf4 cellWidth\cf2 )\line         .attr(\cf7 "fill"\cf3 , \cf7 "orange"\cf2 )\line         .attr(\cf7 "d"\cf3 , function \cf2 (d\cf3 , \cf2 index) \{\line             \cf3 if \cf2 (d === \cf6 1\cf2 )\{\line                 \cf3 let \cf2 x = (vis.\cf4 cellWidth \cf2 + vis.\cf4 cellPadding\cf2 )*index\cf3 ;\line                 let \cf2 y = vis.\cf4 cellHeight\cf3 ;\line                 return \cf2 (\cf7 'M ' \cf2 + x + \cf7 ' ' \cf2 + y + \cf7 ' l ' \cf2 + (-vis.\cf4 cellWidth\cf2 ) + \cf7 ' 0 l 0 ' \cf2 + (-vis.\cf4 cellHeight\cf2 ) + \cf7 ' z'\cf2 )\line             \}\line\line\line         \})\line         .attr(\cf7 "transform"\cf3 , \cf7 "translate(" \cf2 + vis.\cf4 margin\cf2 .\cf4 left\cf2 *\cf6 3.34 \cf2 + \cf7 "," \cf2 + vis.\cf4 margin\cf2 .\cf4 top\cf2 *\cf6 4.25 \cf2 + \cf7 ")"\cf2 )\cf3 ;\line\line     \cf5 // draw family names\line     \cf2 vis.\cf4 drawNames \cf2 = vis.\cf4 row\cf2 .selectAll(\cf7 ".text"\cf2 )\line         .\cf1 data\cf2 (\cf3 function\cf2 (d)\{\line             \cf5 //console.log(d.Family)\line             \cf3 return \cf2 [d.Family]\line         \})\line     vis.\cf4 drawNames\cf2 .\cf4 enter\cf2 ().\cf1 append\cf2 (\cf7 "text"\cf2 )\line         .attr(\cf7 "class"\cf3 , \cf7 "label text"\cf2 )\line         .\cf4 text\cf2 (d => d)\line         .attr(\cf7 "x"\cf3 , \cf2 vis.\cf4 margin\cf2 .\cf4 left\cf2 )\line         .attr(\cf7 "y"\cf3 , function\cf2 (d\cf3 , \cf2 index) \{\line             \cf4\b\i console\cf2\b0\i0 .\cf1 log\cf2 (d)\line             \cf3 return \cf2 (vis.\cf4 cellHeight \cf2 + vis.\cf4 cellPadding\cf2 ) * index \})\line         .attr(\cf7 'text-anchor'\cf3 , \cf7 'end'\cf2 )\line         .attr(\cf7 "fill"\cf3 , \cf7 "black"\cf2 )\line         .attr(\cf7 "transform"\cf3 , \cf7 "translate(" \cf2 + vis.\cf4 margin\cf2 .\cf4 left\cf2 *\cf6 1.8 \cf2 + \cf7 "," \cf2 + vis.\cf4 margin\cf2 .\cf4 top\cf2 *\cf6 4.55 \cf2 + \cf7 ")"\cf2 )\cf3 ;\line\line\line     \cf2 vis.\cf4 row\cf2 .merge(vis.\cf4 cellMatrix\cf2 )  \cf5 // merge ENTER + UPDATE groups\line         \cf2 .\cf4 style\cf2 (\cf7 'opacity'\cf3 , \cf6 0.5\cf2 )\line         .\cf4 transition\cf2 ()\line         .\cf4 duration\cf2 (\cf6 500\cf2 )\line         .\cf4 style\cf2 (\cf7 'opacity'\cf3 , \cf6 1\cf2 )\line\line     vis.\cf4 row\cf2 .\cf4 exit\cf2 ().\cf4 transition\cf2 ().\cf1 remove\cf2 ()\par

\pard\sa200\sl276\slmult1\cf0\f0\fs22\par
}
 